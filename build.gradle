//file:noinspection GrMethodMayBeStatic
buildscript {
    repositories {
        maven { url = "https://plugins.gradle.org/m2/" }
        maven { url = "https://maven.fabricmc.net/" }
        maven { url = "https://server.bbkr.space/artifactory/libs-release/" }
        maven { url = "https://maven.quiltmc.org/repository/release" }
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "fabric-loom" version "1.6.6"

    id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
    id "org.sonarqube" version "4.3.1.3277"

    id "maven-publish"
}

if (findProject(':SophisticatedCore') != null) {
    evaluationDependsOn(':SophisticatedCore')
}

group = mod_group_id
version = "${project.minecraft_version}-${project.mod_version}.${getBuildNumber()}${getStable()}"

base {
    archivesName = project.mod_id
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release"
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }

    maven { url = "https://maven.quiltmc.org/repository/release" } // QM
    maven { url = 'https://maven.parchmentmc.org' } // Parchment

    maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
    maven { url = "https://mvn.devos.one/snapshots/" } // Porting Lib, Forge Tags, Milk Lib, serialization-hooks
    maven { url = "https://jitpack.io/" } // for Porting Lib: Mixin Extras, Fabric ASM
    maven { // Forge Config API Port
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
    maven { // Modern KeyBinding
        url = "https://maven.nova-committee.cn/releases"
    }

    maven { url = "https://maven.terraformersmc.com/" } // Emi
    maven { url = "https://maven.shedaniel.me/" } // REI and deps
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "entity reach"
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
    }

    maven { url = 'https://maven.blamejared.com' }
    maven { url = "https://modmaven.dev" } // Jei
    maven { url = "https://maven.ladysnake.org/releases" } // CCA, for Trinkets
    maven { url = "https://www.cursemaven.com" } // Balm, CraftingTweaks
    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/Salandora/sophisticatedcore")
        credentials {
            username = System.getenv("USERNAME")
            password = System.getenv("READ_PACKAGES_TOKEN")
        }
    }
}

configurations.configureEach {
    resolutionStrategy.eachDependency {
        if (requested.module.name == "fabric-loader") {
            useVersion(loader_version)
        }
    }
}

dependencies {
    setup(dependencies)
    devEnv(dependencies)
    compat(dependencies)
    dependencies(dependencies)
    testing(dependencies)
}

def setup(DependencyHandler deps) {
    deps.minecraft("com.mojang:minecraft:$minecraft_version")
    deps.mappings(loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$qm_version:intermediary-v2")
        if (parchment_version != "none")
            it.parchment("org.parchmentmc.data:parchment-$parchment_version@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })
    deps.modImplementation("net.fabricmc:fabric-loader:$loader_version")

    deps.implementation("javax.annotation:javax.annotation-api:1.3.2")
    deps.implementation("com.google.code.findbugs:jsr305:$jsr305_version")
}

def devEnv(DependencyHandler deps) {
    deps.modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version")
}

def dependencies(DependencyHandler deps) {
    deps.modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_version")

    if (findProject(':SophisticatedCore') != null) {
        deps.implementation(deps.project(path: ':SophisticatedCore', configuration: 'namedElements'))

        def modules = project(':SophisticatedCore')['port_lib_modules'].split(',')
        for (def module in modules) {
            deps.modImplementation("io.github.fabricators_of_create.Porting-Lib:${module.trim()}:$port_lib_version") {
                exclude(group: "com.jamieswhiteshirt", module: "reach-entity-attributes")
            }
        }
    } else {
        deps.modImplementation("net.p3pp3rf1y:sophisticatedcore-fabric:${sc_version}")
    }

    deps.modImplementation("committee.nova.mkb.fabric:mkb-${minecraft_version}:${mkb_mod_version}")

    def modules = project(':SophisticatedCore')['port_lib_modules'].split(',')
    for (def module in port_lib_modules.split(",")) {
        if (modules.contains(module)) {
            deps.modImplementation("io.github.fabricators_of_create.Porting-Lib:${module.trim()}:$port_lib_version")
        } else {
            deps.include(deps.modApi("io.github.fabricators_of_create.Porting-Lib:${module.trim()}:$port_lib_version"))
        }
    }
}

def compat(DependencyHandler deps) {
    deps.modCompileOnly("com.terraformersmc:modmenu:${modmenu_version}")
    deps.modImplementation("maven.modrinth:sodium:mc${minecraft_version}-${sodium_version}")
    deps.modImplementation("maven.modrinth:indium:${indium_version}+mc${minecraft_version}")
    deps.modImplementation("curse.maven:jade-324717:${jade_id}")
    /*compileOnly fg.deobf("curse.maven:chipped-456956:${chipped_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:chipped-456956:${chipped_cf_file_id}")
    compileOnly fg.deobf("curse.maven:athena-841890:${athena_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:athena-841890:${athena_cf_file_id}")
    compileOnly fg.deobf("curse.maven:resourcefullib-570073:${resourcefullib_cf_file_id}")
    runtimeOnly fg.deobf("curse.maven:resourcefullib-570073:${resourcefullib_cf_file_id}")*/

    recipeViewers(deps)
}

def recipeViewers(DependencyHandler deps) {
    // EMI
    deps.modCompileOnly("dev.emi:emi-fabric:$emi_version") { transitive = false }
    // JEI
    deps.modCompileOnlyApi("mezz.jei:jei-$minecraft_version-common-api:$jei_version") { transitive = false }
    deps.modCompileOnlyApi("mezz.jei:jei-$minecraft_version-fabric-api:$jei_version") { transitive = false }
    deps.modCompileOnly("mezz.jei:jei-$minecraft_version-fabric:$jei_version") { transitive = false }
    // REI
    deps.modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version")
    deps.modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:$rei_version")

    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "emi": deps.modLocalRuntime("dev.emi:emi-fabric:$emi_version"); break
        case "jei": deps.modRuntimeOnly("mezz.jei:jei-$minecraft_version-fabric:$jei_version"); break
        case "rei": deps.modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: $recipe_viewer. Must be JEI, REI, EMI, or disabled.")
    }
}

def testing(DependencyHandler deps) {
    deps.testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"

    deps.testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.+'
    deps.testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.+'
    deps.testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.+'
    deps.testImplementation "org.mockito:mockito-core:5.1.+"
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
            exclude("src/generated/resources/.cache")
        }
    }

    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    accessWidenerPath = file("src/main/resources/sophisticatedstorage.accesswidener")

    runs {
        datagen {
            client()
            ideConfigGenerated = true

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=$mod_id"

            source sourceSets.main
            runDir "run/test_client"
        }

        client {
            client()
            ideConfigGenerated = true

            vmArg "-Dmixin.debug.export=true"
            vmArg "-enableassertions"

            source sourceSets.main
            runDir "run/test_client"
        }
        server {
            server()
            ideConfigGenerated = true

            vmArg "-Dmixin.debug.export=true"
            vmArg "-enableassertions"

            source sourceSets.main
            runDir "run/test_server"
        }
        /*gametest {
            server()
            name "Test"
            source sourceSets.main
            vmArg "-Dfabric-api.gametest"
            vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
            runDir "run/gametest_server"
        }*/
    }

    interfaceInjection {
        enableDependencyInterfaceInjection = true
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}
test.dependsOn("processResources")

if (project.tasks.findByName("generateResources")) {
    generateResources.dependsOn runDatagen
}

machete {
    enabled = System.getenv("GITHUB_RUN_NUMBER") != null
}

tasks.withType(ProcessResources).configureEach {
    exclude '.cache'

    var replaceProperties = [
            mod_id              : project.mod_id,
            mod_version         : project.mod_version,
            mod_full_version    : "${project.mod_version}.${getBuildNumber()}${getStable()}",
            minecraft_version   : minecraft_version,
            loader_version      : loader_version,
            fabric_version      : fabric_version,
            sc_version          : project.sc_version,
            mkb_version         : project.mkb_mod_version
    ]
    for (String module in port_lib_modules.split(","))
        replaceProperties.put("port_lib_${module.trim()}_version".toString(), port_lib_version)

    inputs.properties replaceProperties

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
    it.options.release = 17
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.named('jar', Jar).configure {
    from('/') {
        include 'LICENSE'
    }

    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : "p3pp3rf1y",
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : "p3pp3rf1y",
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

static def getBuildNumber() {
    if (System.getenv("GITHUB_RUN_NUMBER") != null) {
        return System.getenv("GITHUB_RUN_NUMBER").toString()
    }
    return ""
}

static def getStable() {
    if (System.getenv("GITHUB_REF") == null || System.getenv("GITHUB_REF").endsWith("-dev")) {
        return "-SNAPSHOT"
    }
    return ""
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("${github_package_url}")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = base.archivesName.get()
            from(components.java)
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "${mod_id}"
        property "sonar.projectKey", "${sonar_project_key}"
    }
}

task printVersionName {
    println "version:" + project.version
}

